// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	subgraph "github.com/z5labs/megamind/subgraph"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubgraphIngestClient is the client API for SubgraphIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubgraphIngestClient interface {
	IngestSubgraph(ctx context.Context, in *subgraph.Subgraph, opts ...grpc.CallOption) (*IngestResponse, error)
	Ingest(ctx context.Context, opts ...grpc.CallOption) (SubgraphIngest_IngestClient, error)
}

type subgraphIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewSubgraphIngestClient(cc grpc.ClientConnInterface) SubgraphIngestClient {
	return &subgraphIngestClient{cc}
}

func (c *subgraphIngestClient) IngestSubgraph(ctx context.Context, in *subgraph.Subgraph, opts ...grpc.CallOption) (*IngestResponse, error) {
	out := new(IngestResponse)
	err := c.cc.Invoke(ctx, "/proto.SubgraphIngest/IngestSubgraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subgraphIngestClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (SubgraphIngest_IngestClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubgraphIngest_ServiceDesc.Streams[0], "/proto.SubgraphIngest/Ingest", opts...)
	if err != nil {
		return nil, err
	}
	x := &subgraphIngestIngestClient{stream}
	return x, nil
}

type SubgraphIngest_IngestClient interface {
	Send(*subgraph.Subgraph) error
	CloseAndRecv() (*IngestResponse, error)
	grpc.ClientStream
}

type subgraphIngestIngestClient struct {
	grpc.ClientStream
}

func (x *subgraphIngestIngestClient) Send(m *subgraph.Subgraph) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subgraphIngestIngestClient) CloseAndRecv() (*IngestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IngestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubgraphIngestServer is the server API for SubgraphIngest service.
// All implementations must embed UnimplementedSubgraphIngestServer
// for forward compatibility
type SubgraphIngestServer interface {
	IngestSubgraph(context.Context, *subgraph.Subgraph) (*IngestResponse, error)
	Ingest(SubgraphIngest_IngestServer) error
	mustEmbedUnimplementedSubgraphIngestServer()
}

// UnimplementedSubgraphIngestServer must be embedded to have forward compatible implementations.
type UnimplementedSubgraphIngestServer struct {
}

func (UnimplementedSubgraphIngestServer) IngestSubgraph(context.Context, *subgraph.Subgraph) (*IngestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestSubgraph not implemented")
}
func (UnimplementedSubgraphIngestServer) Ingest(SubgraphIngest_IngestServer) error {
	return status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedSubgraphIngestServer) mustEmbedUnimplementedSubgraphIngestServer() {}

// UnsafeSubgraphIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubgraphIngestServer will
// result in compilation errors.
type UnsafeSubgraphIngestServer interface {
	mustEmbedUnimplementedSubgraphIngestServer()
}

func RegisterSubgraphIngestServer(s grpc.ServiceRegistrar, srv SubgraphIngestServer) {
	s.RegisterService(&SubgraphIngest_ServiceDesc, srv)
}

func _SubgraphIngest_IngestSubgraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(subgraph.Subgraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubgraphIngestServer).IngestSubgraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SubgraphIngest/IngestSubgraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubgraphIngestServer).IngestSubgraph(ctx, req.(*subgraph.Subgraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubgraphIngest_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubgraphIngestServer).Ingest(&subgraphIngestIngestServer{stream})
}

type SubgraphIngest_IngestServer interface {
	SendAndClose(*IngestResponse) error
	Recv() (*subgraph.Subgraph, error)
	grpc.ServerStream
}

type subgraphIngestIngestServer struct {
	grpc.ServerStream
}

func (x *subgraphIngestIngestServer) SendAndClose(m *IngestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subgraphIngestIngestServer) Recv() (*subgraph.Subgraph, error) {
	m := new(subgraph.Subgraph)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubgraphIngest_ServiceDesc is the grpc.ServiceDesc for SubgraphIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubgraphIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubgraphIngest",
	HandlerType: (*SubgraphIngestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestSubgraph",
			Handler:    _SubgraphIngest_IngestSubgraph_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _SubgraphIngest_Ingest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/ingest/proto/service.proto",
}
